cache_resources:
  - label: view_states
    memcached:
      addresses:
        - memcached:11211
      default_ttl: 3600s

input:
  kafka:
    addresses: ["redpanda:9092"]
    topics: ["snowplow-enriched-good"]
    consumer_group: "discounts-processor"

pipeline:
  processors:
    - log:
        level: DEBUG
        message: "Received event: ${! this }"

    - mapping: |
        meta "user_id" = this.user_id
        meta "webpage_id" = this.webpage_id
        meta "event_name" = this.event_name
        root = this

    - log:
        level: DEBUG
        message: "Extracted metadata: user_id=${! meta(\"user_id\") }, webpage_id=${! meta(\"webpage_id\") }, event_name=${! meta(\"event_name\") }"

    - switch:
        - check: meta("event_name") == "page_ping"
          processors:
            - log:
                level: DEBUG
                message: "Processing page_ping event for user_id=${! meta(\"user_id\") }, webpage_id=${! meta(\"webpage_id\") }"

            - cache:
                resource: view_states
                operator: get
                key: ${! meta("user_id") }_${! meta("webpage_id") }

            - log:
                level: DEBUG
                message: "Retrieved cache for key=${! meta(\"user_id\") }_${! meta(\"webpage_id\") }, value=${! this }"

            - try:
                - mapping: |
                    if this.webpage_id != meta("webpage_id") {
                      root = null
                    }

                    let start = this.start_time.ts_unix()
                    let current = this.collector_tstamp.ts_unix()

                    let duration = current - start
                    meta "duration_seconds" = duration

                    if this.user_id != null && duration >= 90 {
                      root = {
                        (this.user_id): {
                          "schema": "iglu:com.snowplow/shopper_discount_applied/jsonschema/1-0-0",
                          "data": {
                            "shopper_id": this.user_id,
                            "product_id": this.product_id,
                            "discount": 0.1
                          }
                        }
                      }
                      meta "discount_generated" = true
                    } else {
                      root = null
                      meta "discount_generated" = false
                    }

                - log:
                    level: DEBUG
                    message: "Duration calculated: ${! meta(\"duration_seconds\") } seconds, Discount applied: ${! meta(\"discount_generated\") }"

            - catch:
                - log:
                    level: ERROR
                    message: "Error processing page_ping for user_id=${! meta(\"user_id\") }, webpage_id=${! meta(\"webpage_id\") }. Reason: ${! error() }"

        - check: meta("event_name") == "snowplow_ecommerce_action"
          processors:
            - log:
                level: DEBUG
                message: "Processing snowplow_ecommerce_action event for user_id=${! meta(\"user_id\") }, webpage_id=${! meta(\"webpage_id\") }"

            - mapping: |
                root = {
                  "user_id": meta("user_id"),
                  "webpage_id": meta("webpage_id"),
                  "product_id": this.product_id,
                  "start_time": this.collector_tstamp,
                  "type": "view_state"
                }

            - cache:
                resource: view_states
                operator: set
                key: ${! meta("user_id") }_${! meta("webpage_id") }
                value: ${! this }

            - log:
                level: INFO
                message: "View state stored for user_id=${! meta(\"user_id\") }, webpage_id=${! meta(\"webpage_id\") }, product_id=${! this.product_id }"

    - log:
        level: INFO
        message: "Final result: ${! if this != null { \"Discount generated\" } else { \"No action\" } }"

output:
  kafka:
    addresses: ["redpanda:9092"]
    topic: "shopper-discounts"
    max_in_flight: 1
    key: ${! meta("user_id") }
