volumes:
  redpanda: null
services:
  redpanda:
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      - --advertise-kafka-addr internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      - --advertise-pandaproxy-addr internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      - --rpc-addr redpanda:33145
      - --advertise-rpc-addr redpanda:33145
      - --mode dev-container
      - --smp 1
      - --default-log-level=info
    image: docker.redpanda.com/redpandadata/redpanda:v24.3.6
    container_name: redpanda
    volumes:
      - redpanda:/var/lib/redpanda/data
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644
    healthcheck:
      test:
        ["CMD-SHELL", "rpk topic list --brokers=localhost:9092 >/dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 10

  topics-creator:
    entrypoint: /bin/sh
    command: -c 'for topic in snowplow-enriched-good shopper-discounts user-view-states; do rpk topic create $$topic --brokers=redpanda:9092; done'
    image: docker.redpanda.com/redpandadata/redpanda:v24.3.6
    container_name: redpanda-topics-creator
    depends_on:
      redpanda:
        condition: service_healthy

  console:
    container_name: redpanda-console
    image: docker.redpanda.com/redpandadata/console:v2.8.3
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
    ports:
      - 8080:8080
    depends_on:
      - redpanda

  discounts-processor:
    container_name: redpanda-discounts-processor
    image: docker.redpanda.com/redpandadata/connect
    depends_on:
      - redpanda
    entrypoint: /bin/sh
    command: -c 'echo "$$CONNECT_CFG_FILE" > /tmp/connect.yaml; /redpanda-connect --chilled -c /tmp/connect.yaml'
    restart: unless-stopped
    environment:
      CONNECT_CFG_FILE: |
        input:
          kafka:
            addresses: ["redpanda:9092"]
            topics: ["snowplow-enriched-good"]
            consumer_group: "discounts-processor"

        pipeline:
          processors:
            - branch:
                processors:
                  - switch:
                      cases:
                        - check: meta("event_name") == "page_ping"
                          processors:
                            - mapping: |
                                meta user_id = this.user_id
                                meta webpage_id = this.webpage_id
                                root = this
                            
                            - cache:
                                operator: get
                                key: $${! meta("user_id") + "_" + meta("webpage_id") }
                                target: view_state
                            
                            - try:
                                processors:
                                  - mapping: |
                                      if this.webpage_id != meta("webpage_id") {
                                        root = null
                                        return
                                      }
                                      
                                      meta matched_webpage = true
                                      
                                      let start = this.start_time
                                      let current = root.collector_tstamp
                                      let duration = (new Date(current) - new Date(start)) / 1000
                                      
                                      meta duration_seconds = duration
                                      
                                      if duration >= 90 {
                                        root = {
                                          "schema": "iglu:com.snowplow/shopper_discount_applied/jsonschema/1-0-0",
                                          "data": {
                                            "shopper_id": this.user_id,
                                            "product_id": this.product_id,
                                            "discount": 0.1
                                          }
                                        }
                                        meta discount_generated = true
                                      } else {
                                        root = null
                                        meta discount_generated = false
                                      }
                                  
                                  - log:
                                      level: INFO
                                      message: 'Ping processed: User=$${! meta("user_id") }, Webpage=$${! meta("webpage_id") }, Duration=$${! meta("duration_seconds") }s, Discount=$${! meta("discount_generated") ? "Generated" : "Not generated" }'
                                
                                fallback:
                                  - log:
                                      level: WARN
                                      message: 'Failed to process ping: View state not found or invalid for user_id=$${! meta("user_id") }'

                        - check: meta("event_name") == "snowplow_ecommerce_action"
                          processors:
                            - log:
                                level: INFO
                                message: "Processing product view: User=$${! meta(\"user_id\") }, Product=$${! this.product_id }, Webpage=$${! meta(\"webpage_id\") }"
                            
                            - mapping: |
                                root = {
                                  "user_id": meta("user_id"),
                                  "webpage_id": meta("webpage_id"),
                                  "product_id": this.product_id,
                                  "start_time": this.collector_tstamp,
                                  "type": "view_state"
                                }
                            
                            - cache:
                                operator: set
                                key: $${! meta("user_id") + "_" + meta("webpage_id") }
                                value: $${! this }

            - log:
                level: INFO
                message: 'Final processing result: $${! this != null ? "Discount generated" : "No discount generated" }'
                fields_mapping: |
                  if this != null {
                    root.schema = this.schema
                    root.shopper_id = this.data.shopper_id
                    root.product_id = this.data.product_id
                    root.discount = this.data.discount
                  }

        output:
          kafka:
            addresses: ["redpanda:9092"]
            topic: "shopper-discounts"
            max_in_flight: 1
