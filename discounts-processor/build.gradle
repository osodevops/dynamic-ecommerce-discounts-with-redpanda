plugins {
    id 'java'
    id 'application'
}

group = 'com.example'
version = '1.0-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
}

ext {
    flinkVersion = '1.17.1'
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    implementation "org.apache.flink:flink-streaming-java:${flinkVersion}"
    implementation "org.apache.flink:flink-clients:${flinkVersion}"
    implementation "org.apache.flink:flink-connector-kafka:${flinkVersion}"
    implementation "org.apache.flink:flink-connector-base:${flinkVersion}"
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.3'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.3'
    implementation 'org.slf4j:slf4j-api:2.0.9'
    implementation 'ch.qos.logback:logback-classic:1.4.11'

    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testImplementation "org.apache.flink:flink-test-utils:${flinkVersion}"
    testImplementation "org.apache.flink:flink-streaming-java:${flinkVersion}:tests"
    testImplementation "org.apache.flink:flink-runtime:${flinkVersion}:tests"
    testImplementation 'org.mockito:mockito-core:5.3.1'
    testImplementation 'org.testcontainers:testcontainers:1.19.3'
    testImplementation 'org.testcontainers:junit-jupiter:1.19.3'
    testImplementation "org.testcontainers:redpanda:1.20.6"
    testImplementation 'org.awaitility:awaitility:4.2.0'
    testImplementation 'org.apache.kafka:kafka-clients:3.4.0'
    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    testImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.2'
}

application {
    mainClass = 'com.example.DiscountsProcessor'
    applicationDefaultJvmArgs = [
        '--add-opens=java.base/java.util=ALL-UNNAMED',
        '--add-opens=java.base/java.lang=ALL-UNNAMED',
        '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED',
        '--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED'
    ]
}

def configureTestTask = { task ->
    task.useJUnitPlatform()
    task.testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        showExceptions true
        showCauses true
        showStackTraces true
        exceptionFormat "full"
        showStandardStreams true
    }
    task.jvmArgs = [
        '--add-opens', 'java.base/java.util=ALL-UNNAMED',
        '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
        '--add-opens', 'java.base/java.util.concurrent.atomic=ALL-UNNAMED'
    ]
}

test {
    configureTestTask(it)
    filter {
        excludeTestsMatching "*IntegrationTest"
    }
}

task integrationTest(type: Test) {
    configureTestTask(it)
    filter {
        includeTestsMatching "*IntegrationTest"
    }
    outputs.upToDateWhen { false }
}

task allTests(type: Test) {
    configureTestTask(it)
    useJUnitPlatform()
}

jar {
    manifest {
        attributes(
            'Main-Class': 'com.example.DiscountsProcessor'
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
